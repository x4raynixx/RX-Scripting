using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;

public static class RXInterpreter
{
    static Dictionary<string, int> variables = new Dictionary<string, int>();
    private static Random randomGenerator = new Random();

    static string FormatString(string str)
    {
        string result = str;
        Regex rgx = new Regex("%\\((.*?)\\)");
        Match match = rgx.Match(result);

        while (match.Success)
        {
            string var = match.Groups[1].Value;
            string replacement;
            if (variables.ContainsKey(var))
            {
                replacement = variables[var].ToString();
            }
            else
            {
                replacement = "undefined";
            }
            result = result.Remove(match.Index, match.Length).Insert(match.Index, replacement);
            match = rgx.Match(result, match.Index + replacement.Length);
        }
        return result;
    }

    static int RandomInRange(int min, int max)
    {
        return randomGenerator.Next(min, max + 1);
    }

    static void PrintError(string message, int lineNumber, string filename)
    {
        Console.Error.WriteLine($"\u001b[1;31mError at line {lineNumber} in file {filename}: {message}\u001b[0m");
    }

    static int ParseValue(string str, int lineNumber, string filename)
    {
        try
        {
            return int.Parse(str);
        }
        catch (FormatException)
        {
            if (variables.ContainsKey(str))
            {
                return variables[str];
            }
            PrintError($"Variable not defined or invalid value: {str}", lineNumber, filename);
            return 0;
        }
        catch (Exception ex)
        {
            PrintError($"Error parsing value '{str}': {ex.Message}", lineNumber, filename);
            return 0;
        }
    }

    static void ExecuteRX(string code, string filename)
    {
        using (StringReader stream = new StringReader(code))
        {
            string line;
            int lineNumber = 0;
            while ((line = stream.ReadLine()) != null)
            {
                lineNumber++;
                line = line.Trim(' ', '\t');

                if (string.IsNullOrEmpty(line))
                {
                    continue;
                }

                if (line.StartsWith("log("))
                {
                    int startPos = line.IndexOf('\'') + 1;
                    int endPos = line.IndexOf('\'', startPos);
                    if (startPos == 0 || endPos == -1)
                    {
                        PrintError("Invalid syntax in log statement!", lineNumber, filename);
                        continue;
                    }
                    Console.WriteLine(FormatString(line.Substring(startPos, endPos - startPos)));
                }
                else if (line.StartsWith("batch("))
                {
                    int startPos = line.IndexOf('\'') + 1;
                    int endPos = line.IndexOf('\'', startPos);
                    if (startPos == 0 || endPos == -1)
                    {
                        PrintError("Invalid syntax in batch statement!", lineNumber, filename);
                        continue;
                    }
                    string command = line.Substring(startPos, endPos - startPos);
                    try
                    {
                        ProcessStartInfo psi = new ProcessStartInfo();
                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            psi.FileName = "cmd.exe";
                            psi.Arguments = $"/c {command}";
                        }
                        else
                        {
                            psi.FileName = "/bin/sh";
                            psi.Arguments = $"-c \"{command.Replace("\"", "\\\"")}\"";
                        }
                        psi.UseShellExecute = false;
                        psi.RedirectStandardOutput = false;
                        psi.RedirectStandardError = false;

                        Process process = Process.Start(psi);
                        process.WaitForExit();
                    }
                    catch (Exception ex)
                    {
                        PrintError($"Failed to execute batch command: {ex.Message}", lineNumber, filename);
                    }
                }
                else if (line.Contains("="))
                {
                    int equalsPos = line.IndexOf('=');
                    string varName = line.Substring(0, equalsPos).Trim(' ', '\t');
                    string expression = line.Substring(equalsPos + 1).Trim(' ', '\t');

                    if (expression.StartsWith("add("))
                    {
                        int startPos = expression.IndexOf('(') + 1;
                        int endPos = expression.IndexOf(')', startPos);
                        if (startPos == 0 || endPos == -1)
                        {
                            PrintError("Invalid syntax for math operation!", lineNumber, filename);
                            continue;
                        }
                        string expr = expression.Substring(startPos, endPos - startPos);
                        int delimPos = expr.IndexOf(',');
                        if (delimPos == -1)
                        {
                            PrintError("Invalid parameters for math operation!", lineNumber, filename);
                            continue;
                        }
                        string var1 = expr.Substring(0, delimPos).Trim(' ', '\t');
                        string var2 = expr.Substring(delimPos + 1).Trim(' ', '\t');

                        int val1 = ParseValue(var1, lineNumber, filename);
                        int val2 = ParseValue(var2, lineNumber, filename);
                        variables[varName] = val1 + val2;
                    }
                    else if (expression.StartsWith("sub("))
                    {
                        int startPos = expression.IndexOf('(') + 1;
                        int endPos = expression.IndexOf(')', startPos);
                        if (startPos == 0 || endPos == -1)
                        {
                            PrintError("Invalid syntax for math operation!", lineNumber, filename);
                            continue;
                        }
                        string expr = expression.Substring(startPos, endPos - startPos);
                        int delimPos = expr.IndexOf(',');
                        if (delimPos == -1)
                        {
                            PrintError("Invalid parameters for math operation!", lineNumber, filename);
                            continue;
                        }
                        string var1 = expr.Substring(0, delimPos).Trim(' ', '\t');
                        string var2 = expr.Substring(delimPos + 1).Trim(' ', '\t');

                        int val1 = ParseValue(var1, lineNumber, filename);
                        int val2 = ParseValue(var2, lineNumber, filename);
                        variables[varName] = val1 - val2;
                    }
                    else if (expression.StartsWith("random("))
                    {
                        int startPos = expression.IndexOf('(') + 1;
                        int endPos = expression.IndexOf(')', startPos);
                        if (startPos == 0 || endPos == -1)
                        {
                            PrintError("Invalid syntax for random operation!", lineNumber, filename);
                            continue;
                        }
                        string range = expression.Substring(startPos, endPos - startPos);
                        int commaPos = range.IndexOf(',');
                        if (commaPos == -1)
                        {
                            PrintError("Invalid range for random operation!", lineNumber, filename);
                            continue;
                        }
                        try
                        {
                            int min = int.Parse(range.Substring(0, commaPos).Trim(' ', '\t'));
                            int max = int.Parse(range.Substring(commaPos + 1).Trim(' ', '\t'));
                            if (min > max)
                            {
                                PrintError("Invalid range for random operation (min > max)!", lineNumber, filename);
                                continue;
                            }
                            variables[varName] = RandomInRange(min, max);
                        }
                        catch (FormatException)
                        {
                            PrintError("Invalid numeric values for random range!", lineNumber, filename);
                        }
                        catch (Exception ex)
                        {
                             PrintError($"Error parsing random range: {ex.Message}", lineNumber, filename);
                        }
                    }
                    else
                    {
                        variables[varName] = ParseValue(expression, lineNumber, filename);
                    }
                }
                 else if (!string.IsNullOrWhiteSpace(line))
                {
                     PrintError($"Unrecognized command or invalid syntax: {line}", lineNumber, filename);
                }
            }
        }
    }

    public static int Main(string[] args)
    {
        if (args.Length < 1)
        {
            Console.WriteLine("Usage: rx <filename.rx>");
            return 1;
        }

        string filename = args[0];
        string code;

        try
        {
            code = File.ReadAllText(filename);
        }
        catch (FileNotFoundException)
        {
            Console.Error.WriteLine($"Error: Cannot open file {filename}");
            return 1;
        }
        catch (IOException ex)
        {
             Console.Error.WriteLine($"Error reading file {filename}: {ex.Message}");
             return 1;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An unexpected error occurred while accessing file {filename}: {ex.Message}");
            return 1;
        }

        ExecuteRX(code, filename);

        return 0;
    }
}
